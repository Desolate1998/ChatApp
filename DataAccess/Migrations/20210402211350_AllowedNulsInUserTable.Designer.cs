// <auto-generated />
using System;
using DataAccess;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Persistent.Migrations
{
    [DbContext(typeof(DataContext))]
    [Migration("20210402211350_AllowedNulsInUserTable")]
    partial class AllowedNulsInUserTable
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.4")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Domain.DatabaseModels.Friends", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("UserXid")
                        .HasColumnType("int");

                    b.Property<int>("UserYid")
                        .HasColumnType("int");

                    b.HasKey("id");

                    b.HasIndex("UserXid");

                    b.HasIndex("UserYid");

                    b.ToTable("Friends");
                });

            modelBuilder.Entity("Domain.DatabaseModels.UserConnections", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ConnectionCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateConnected")
                        .HasColumnType("datetime2");

                    b.Property<int>("Userid")
                        .HasColumnType("int");

                    b.HasKey("id");

                    b.HasIndex("Userid");

                    b.ToTable("UserConnections");
                });

            modelBuilder.Entity("Domain.FriendRequest", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("SentFromid")
                        .HasColumnType("int");

                    b.Property<int>("SentToid")
                        .HasColumnType("int");

                    b.HasKey("id");

                    b.HasIndex("SentFromid")
                        .IsUnique();

                    b.HasIndex("SentToid")
                        .IsUnique();

                    b.ToTable("FriendRequests");
                });

            modelBuilder.Entity("Domain.Gender", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("id");

                    b.ToTable("Genders");
                });

            modelBuilder.Entity("Domain.User", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("Age")
                        .HasColumnType("int");

                    b.Property<DateTime?>("DateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("FirstName")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<int?>("Genderid")
                        .HasColumnType("int");

                    b.Property<string>("LastName")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Password")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("ProfileImage")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("id");

                    b.HasIndex("Genderid")
                        .IsUnique()
                        .HasFilter("[Genderid] IS NOT NULL");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("Domain.DatabaseModels.Friends", b =>
                {
                    b.HasOne("Domain.User", "UserX")
                        .WithMany()
                        .HasForeignKey("UserXid")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Domain.User", "UserY")
                        .WithMany()
                        .HasForeignKey("UserYid")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("UserX");

                    b.Navigation("UserY");
                });

            modelBuilder.Entity("Domain.DatabaseModels.UserConnections", b =>
                {
                    b.HasOne("Domain.User", "user")
                        .WithMany()
                        .HasForeignKey("Userid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("user");
                });

            modelBuilder.Entity("Domain.FriendRequest", b =>
                {
                    b.HasOne("Domain.User", "SentFrom")
                        .WithOne()
                        .HasForeignKey("Domain.FriendRequest", "SentFromid")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Domain.User", "SentTo")
                        .WithOne()
                        .HasForeignKey("Domain.FriendRequest", "SentToid")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("SentFrom");

                    b.Navigation("SentTo");
                });

            modelBuilder.Entity("Domain.User", b =>
                {
                    b.HasOne("Domain.Gender", "Gender")
                        .WithOne()
                        .HasForeignKey("Domain.User", "Genderid");

                    b.Navigation("Gender");
                });
#pragma warning restore 612, 618
        }
    }
}
